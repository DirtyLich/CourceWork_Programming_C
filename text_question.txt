Привет! Конечно, я могу помочь тебе с написанием кода для алгоритма Лемпела-Зива (LZ77) на языке программирования C. Вот пример кода, который ты можешь использовать в своей курсовой работе:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define WINDOW_SIZE 15
#define BUFFER_SIZE 8

void lz77compress(FILE *input_file, FILE *output_file) {
    // Реализуй эту функцию для сжатия текстового файла алгоритмом LZ77
    // Используй указанные размеры окна и буфера (WINDOW_SIZE и BUFFER_SIZE)
}

void lz77decompress(FILE *input_file, FILE *output_file) {
    // Реализуй эту функцию для распаковки файла, сжатого алгоритмом LZ77
}

int main(int argc, char *argv[]) {
    if (argc != 5) {
        printf("Usage: %s -c/-d -o <output_file> <input_file>\n", argv[0]);
        return 1;
    }

    char *option = argv[1];
    char *output_filename = argv[2];
    char *input_filename = argv[4];

    FILE *input_file = fopen(input_filename, "r");
    FILE *output_file = fopen(output_filename, "w");

    if (input_file == NULL || output_file == NULL) {
        printf("Error opening files.\n");
        return 1;
    }

    if (strcmp(option, "-c") == 0) {
        lz77compress(input_file, output_file);
        printf("File compressed successfully.\n");
    } else if (strcmp(option, "-d") == 0) {
        lz77decompress(input_file, output_file);
        printf("File decompressed successfully.\n");
    } else {
        printf("Invalid option.\n");
        return 1;
    }

    fclose(input_file);
    fclose(output_file);
    return 0;
}
```

Обрати внимание на функции `lz77compress` и `lz77decompress`, которые нужно реализовать для сжатия и распаковки файлов соответственно. Ты можешь использовать указанные размеры окна и буфера, чтобы реализовать алгоритм LZ77.

Удачи с курсовой работой! Если у тебя возникнут вопросы или понадобится дополнительная помощь, не стесняйся обращаться.

Конечно! Вот реализация функций `lz77compress` и `lz77decompress` для алгоритма LZ77:

```c
void lz77compress(FILE *input_file, FILE *output_file) {
    int next_position = 0;
    char window[WINDOW_SIZE];
    char buffer[BUFFER_SIZE];
  
    memset(window, ' ', WINDOW_SIZE);
    int read_chars = fread(buffer, sizeof(char), BUFFER_SIZE, input_file);
  
    while (read_chars > 0) {
        int longest_match_length = 0;
        int longest_match_offset = 0;
    
        for (int offset = 0; offset < WINDOW_SIZE; offset++) {
            int match_length = 0;
    
            while (match_length < BUFFER_SIZE && buffer[match_length] == window[(next_position + offset + match_length) % WINDOW_SIZE]) {
                match_length++;
            }
    
            if (match_length > longest_match_length) {
                longest_match_length = match_length;
                longest_match_offset = offset;
            }
        }
    
        fwrite(&longest_match_offset, sizeof(int), 1, output_file);
        fwrite(&longest_match_length, sizeof(int), 1, output_file);
        fwrite(&buffer[longest_match_length], sizeof(char), 1, output_file);
    
        memmove(window + next_position, buffer, longest_match_length);
        next_position = (next_position + longest_match_length) % WINDOW_SIZE;
    
        memmove(window + next_position, buffer + longest_match_length, BUFFER_SIZE - longest_match_length);
    
        read_chars = fread(buffer, sizeof(char), BUFFER_SIZE, input_file);
    }
}
```

```c
void lz77decompress(FILE *input_file, FILE *output_file) {
    int next_position = 0;
    char window[WINDOW_SIZE];
  
    memset(window, ' ', WINDOW_SIZE);
    int offset, length;
    char next_char;
  
    while (fread(&offset, sizeof(int), 1, input_file) == 1 && fread(&length, sizeof(int), 1, input_file) == 1 && fread(&next_char, sizeof(char), 1, input_file) == 1) {
        for (int i = 0; i < length; i++) {
            char output_char = window[(next_position + offset + i) % WINDOW_SIZE];
            fwrite(&output_char, sizeof(char), 1, output_file);
            window[(next_position + i) % WINDOW_SIZE] = output_char;
        }
    
        fwrite(&next_char, sizeof(char), 1, output_file);
        window[(next_position + length) % WINDOW_SIZE] = next_char;
        next_position = (next_position + length + 1) % WINDOW_SIZE;
    }
}
```

Эти функции реализуют сжатие и распаковку файлов, используя алгоритм LZ77. Я надеюсь, это поможет тебе завершить курсовую работу! Если у тебя возникнут еще вопросы, пожалуйста, дай мне знать.